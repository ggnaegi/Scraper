import path        from "path";
import config      from "../../config";
import {hyphenate} from "../utils";


/***
 *
 * @param name
 * @param message
 * @param serviceName
 * @param statusCode
 * @returns {{name, message, serviceName, statusCode}}
 */
export const baseErrorDescriptor = ({
                                        name = "GenericError",
                                        title = "A Generic Error has occurred",
                                        serviceName = "services/error",
                                        statusCode = 500
                                    } = {}) => ({
    name,
    title,
    serviceName,
    statusCode
});

/***
 *
 * @param detail
 * @param calledFunction
 * @param inputVariables
 * @param innerError
 * @param extra
 * @returns {{calledFunction, innerError, inputVariables}}
 */
export const detailErrorDescriptor = ({
                                          detail = "Detail Error has occurred",
                                          calledFunction = "unknown",
                                          inputVariables = {},
                                          innerError = null,
                                          extra = null
                                      } = {}) => ({
    detail,
    calledFunction,
    inputVariables,
    innerError,
    extra
});

/**
 * Generic Error class used in the current solution, should implement RFC 7807
 * https://tools.ietf.org/html/rfc7807
 *
 * A problem details object can have the following members:
 *
 * o  "type" (string) - A URI reference [RFC3986] that identifies the
 * problem type.  This specification encourages that, when
 * dereferenced, it provide human-readable documentation for the
 * problem type (e.g., using HTML [W3C.REC-html5-20141028]).  When
 * this member is not present, its value is assumed to be
 * "about:blank".
 *
 * o  "title" (string) - A short, human-readable summary of the problem
 * type.  It SHOULD NOT change from occurrence to occurrence of the
 * problem, except for purposes of localization (e.g., using
 * proactive content negotiation; see [RFC7231], Section 3.4).
 *
 * o  "status" (number) - The HTTP status code ([RFC7231], Section 6)
 * generated by the origin server for this occurrence of the problem.
 *
 * o  "detail" (string) - A human-readable explanation specific to this
 * occurrence of the problem.
 *
 * o  "instance" (string) - A URI reference that identifies the specific
 * occurrence of the problem.  It may or may not yield further
 * information if dereferenced.
 *
 */
export class GenericError extends Error {
    constructor(currentErrorDescriptor) {
        super(currentErrorDescriptor.message);
        this.ced = currentErrorDescriptor;
    }

    /***
     *
     * @param req
     * @param res
     */
    toJson(req, res) {
        res.status(this.ced.statusCode).json({
            type: path.join(config.errorTypesBaseUrl, hyphenate(this.ced.constructor.name)),
            title: this.ced.title,
            status: this.ced.statusCode,
            detail: this.ced.detail,
            instance: req.originalUrl,
            context: {
                httpMethod: req.httpMethod,
                requestParams: req.params,
                requestBody: req.body,
                serviceName: this.ced.serviceName,
                calledFunction: this.ced.calledFunction,
                innerError: () => {
                    if (!this.ced.innerError) {
                        return null;
                    }

                    return {
                        message: this.ced.innerError.message,
                        name: this.ced.innerError.name,
                        stack: this.ced.innerError.stack,
                        code: this.ced.innerError.code,
                        errno: this.ced.innerError.errno,
                        syscall: this.ced.innerError.syscall
                    };
                }
            }
        });
    }
}

/***
 * Error Handler for Generic Errors
 * @returns {function(...[*]=)}
 */
export function errorHandler() {
    return function (err, req, res, next) {
        if (err instanceof GenericError) {
            err.toJson(req, res);
        } else {
            next(err);
        }
    };
}
